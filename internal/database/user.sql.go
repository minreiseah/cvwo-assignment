// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    picture,
    sub
) VALUES(
    $1, $2, $3, $4
) 
ON CONFLICT (sub) DO UPDATE 
SET name = $1,
    email = $2,
    picture = $3
RETURNING id, name, email, picture, sub, created_at
`

type CreateUserParams struct {
	Name    string `json:"name"`
	Email   string `json:"email"`
	Picture string `json:"picture"`
	Sub     string `json:"sub"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Picture,
		arg.Sub,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Picture,
		&i.Sub,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, picture, sub, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Picture,
		&i.Sub,
		&i.CreatedAt,
	)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT id from users
WHERE sub = $1 LIMIT 1
`

func (q *Queries) GetUserID(ctx context.Context, sub string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserID, sub)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserSub = `-- name: GetUserSub :one
SELECT sub from users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserSub(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserSub, id)
	var sub string
	err := row.Scan(&sub)
	return sub, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, picture, sub, created_at FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Picture,
			&i.Sub,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
