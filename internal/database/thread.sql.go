// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: thread.sql

package db

import (
	"context"
	"database/sql"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (
    title,
    content,
    user_id
) VALUES (
    $1, $2, (SELECT id from users WHERE sub = $3 LIMIT 1)
)
RETURNING id, title, content, views, created_at, user_id
`

type CreateThreadParams struct {
	Title   string `json:"title"`
	Content string `json:"content"`
	Sub     string `json:"sub"`
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread, arg.Title, arg.Content, arg.Sub)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Views,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteThread = `-- name: DeleteThread :exec
DELETE FROM threads
WHERE id = $1
`

func (q *Queries) DeleteThread(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteThread, id)
	return err
}

const getThread = `-- name: GetThread :one
SELECT id, title, content, views, created_at, user_id FROM threads
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetThread(ctx context.Context, id int32) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThread, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Views,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const listThreads = `-- name: ListThreads :many
SELECT id, title, content, views, created_at, user_id FROM threads
ORDER BY id
`

func (q *Queries) ListThreads(ctx context.Context) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listThreads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Views,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThreadsByPopularity = `-- name: ListThreadsByPopularity :many
SELECT id, title, content, views, created_at, user_id FROM threads
ORDER BY views
`

func (q *Queries) ListThreadsByPopularity(ctx context.Context) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listThreadsByPopularity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Views,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThreadsByTime = `-- name: ListThreadsByTime :many
SELECT id, title, content, views, created_at, user_id FROM threads
ORDER BY created_at
`

func (q *Queries) ListThreadsByTime(ctx context.Context) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listThreadsByTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Views,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThreadsFromCategory = `-- name: ListThreadsFromCategory :many
SELECT t.id, t.title, t.content, t.views, t.created_at, t.user_id FROM threads t
JOIN threads_categories tc ON t.id = tc.thread_id
WHERE tc.category_id = $1
ORDER BY id
`

func (q *Queries) ListThreadsFromCategory(ctx context.Context, categoryID int32) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listThreadsFromCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Views,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateThread = `-- name: UpdateThread :one
UPDATE threads
SET title = COALESCE($2, title),
    content = COALESCE($3, content)
WHERE id = $1
RETURNING id, title, content, views, created_at, user_id
`

type UpdateThreadParams struct {
	ID      int32          `json:"id"`
	Title   sql.NullString `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdateThread(ctx context.Context, arg UpdateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, updateThread, arg.ID, arg.Title, arg.Content)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Views,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
